package baekjoon.exhaustive_search;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;

public class Q14889 {
	public static int [][] a;
	public static int n;
	public static List<List<Integer>> list = new ArrayList<>();
	public static int ans = Integer.MAX_VALUE;

	public static void go(List<Integer> temp) {
		if(temp.size()==n/2) {
			list.add(temp);
			System.out.println(temp.toString());
			return ;
		}
		for(int k=1; k<=n; k++) {
			if(!temp.contains(k)) {
				temp.add(k);
				go(temp);
				temp.remove(temp.size()-1);
			}
		}
	}

	public static void calculation(boolean [] team) {
		int start = 0;
		int link = 0;

		for(int i=1; i<=n; i++) {
			for(int j=1; j<=n; j++) {
				if(i==j) continue;
				if(team[i] && team[j]) {
					start += a[i][j];
				} else if(!team[i] && !team[j]) {
					link += a[i][j];
				}
			}
		}

		ans = Math.min(ans, Math.abs(start-link));
	}

	public static void main(String[] args) throws IOException  {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(reader.readLine());
		a = new int[n+1][n+1];
		for(int i=1; i<=n; i++) {
			StringTokenizer st = new StringTokenizer(reader.readLine());
			for(int j=1; j<=n; j++) {
				a[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		go(new ArrayList<Integer>());
		boolean [] team = new boolean[n+1];
		for(int i=0; i<list.size(); i++) {
			Arrays.fill(team, false);
			List<Integer> temp = list.get(i);
			for(int j=0; j<temp.size(); j++) {
				team[temp.get(j)] = true;
			}
			calculation(team);
		}

		System.out.print(ans);
	}
}