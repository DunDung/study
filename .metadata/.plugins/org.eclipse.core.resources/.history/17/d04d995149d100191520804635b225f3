package kakao.T2020;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

class Pos{
	int x;
	int y;
	public Pos(int x, int y) {
		this.x = x;
		this.y = y;
	}
}
public class Q5 {
	public static void main(String[] args) {
		int [][] a = {{1,0,0,1},{1,1,1,1},{2,1,0,1},{2,2,1,1},{5,0,0,1},{5,1,0,1},{4,2,1,1},{3,2,1,1}};
		soultion(5, a);
	}
	public int[][] solution(int n, int[][] build_frame) {
		Map<Pos, Integer> map = new HashMap<>();
		for(int i=0; i<build_frame.length; i++) {
			if(build_frame[i][3] == 1) { //설치
				if(build_frame[i][2] == 0) { //기둥
					if(build_frame[i][1] == 0) { //바닥이면
						map.put(new Pos(build_frame[i][0], build_frame[i][1]), 0);
					} else { //바닥아니면
						Pos p = new Pos(build_frame[i][0]-1, build_frame[i][1]);
						if(map.containsKey(p) && map.get(p)==1) { //왼쪽에 보가 있으면
							map.put(new Pos(build_frame[i][0], build_frame[i][1]), 0);
						}
					}
				} else { //보
					Pos p = new Pos(build_frame[i][0], build_frame[i][1]-1);
					if(map.containsKey(p) && map.get(p)==0) { //아래에 기둥이 있으면
						map.put(new Pos(build_frame[i][0], build_frame[i][1]), 0);
					} else {
						Pos left = new Pos(build_frame[i][0]-1, build_frame[i][1]);
						Pos right = new Pos(build_frame[i][0]+1, build_frame[i][1]);
						if(map.containsKey(left) && map.containsKey(right)) {
							if(map.get(left)==1 && map.get(right) == 1) {
								map.put(new Pos(build_frame[i][0], build_frame[i][1]), 0);
							}
						}
					}
				}
			}
		}
		for(Map.Entry<Pos, Integer> m : map.entrySet()) {
			System.out.println(m.getKey().x+" "+ m.getKey().y+" "+m.getValue());
		}
		int[][] answer = {};
		return answer;
	}
}
